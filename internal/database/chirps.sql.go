// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: chirps.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createChirp = `-- name: CreateChirp :one
WITH chirpinsert AS (
	INSERT INTO chirps (id, body, user_id, created_at, updated_at)
	VALUES (
		GEN_RANDOM_UUID(),
		$1,
		$2,
		NOW(),
		NOW()
	) RETURNING id, body, user_id, created_at, updated_at
)
SELECT chirpinsert.id, chirpinsert.body, chirpinsert.user_id, chirpinsert.created_at, chirpinsert.updated_at, users.is_chirpy_red FROM chirpinsert
INNER JOIN users ON chirpinsert.user_id = users.id
`

type CreateChirpParams struct {
	Body   string
	UserID uuid.UUID
}

type CreateChirpRow struct {
	ID          uuid.UUID
	Body        string
	UserID      uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	IsChirpyRed bool
}

func (q *Queries) CreateChirp(ctx context.Context, arg CreateChirpParams) (CreateChirpRow, error) {
	row := q.db.QueryRowContext(ctx, createChirp, arg.Body, arg.UserID)
	var i CreateChirpRow
	err := row.Scan(
		&i.ID,
		&i.Body,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsChirpyRed,
	)
	return i, err
}

const deleteChirp = `-- name: DeleteChirp :exec
DELETE FROM chirps WHERE id = $1
`

func (q *Queries) DeleteChirp(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteChirp, id)
	return err
}

const getAllChirps = `-- name: GetAllChirps :many
SELECT chirps.id, chirps.body, chirps.user_id, chirps.created_at, chirps.updated_at, users.is_chirpy_red FROM chirps
INNER JOIN users ON chirps.user_id = users.id
ORDER BY chirps.created_at ASC
`

type GetAllChirpsRow struct {
	ID          uuid.UUID
	Body        string
	UserID      uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	IsChirpyRed bool
}

func (q *Queries) GetAllChirps(ctx context.Context) ([]GetAllChirpsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllChirps)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllChirpsRow
	for rows.Next() {
		var i GetAllChirpsRow
		if err := rows.Scan(
			&i.ID,
			&i.Body,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsChirpyRed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOneChirp = `-- name: GetOneChirp :one
SELECT chirps.id, chirps.body, chirps.user_id, chirps.created_at, chirps.updated_at, users.is_chirpy_red FROM chirps
INNER JOIN users ON chirps.user_id = users.id
WHERE chirps.id = $1
`

type GetOneChirpRow struct {
	ID          uuid.UUID
	Body        string
	UserID      uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	IsChirpyRed bool
}

func (q *Queries) GetOneChirp(ctx context.Context, id uuid.UUID) (GetOneChirpRow, error) {
	row := q.db.QueryRowContext(ctx, getOneChirp, id)
	var i GetOneChirpRow
	err := row.Scan(
		&i.ID,
		&i.Body,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsChirpyRed,
	)
	return i, err
}
